.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Dancer2::Template::TemplateToolkit 3"
.TH Dancer2::Template::TemplateToolkit 3 "2017-03-10" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dancer2::Template::TemplateToolkit \- Template toolkit engine for Dancer2
.SH "VERSION"
.IX Header "VERSION"
version 0.205000
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To use this engine, you may configure Dancer2 via \f(CW\*(C`config.yaml\*(C'\fR:
.PP
.Vb 1
\&    template:   "template_toolkit"
.Ve
.PP
Or you may also change the rendering engine on a per-route basis by
setting it manually with \f(CW\*(C`set\*(C'\fR:
.PP
.Vb 2
\&    # code code code
\&    set template => \*(Aqtemplate_toolkit\*(Aq;
.Ve
.PP
Most configuration variables available when creating a new instance of a
Template::Toolkit object can be declared inside the template toolkit
section on the engines configuration (see your config.yml file):
.PP
.Vb 5
\&  engines:
\&    template:
\&      template_toolkit:
\&        start_tag: \*(Aq<%\*(Aq
\&        end_tag:   \*(Aq%>\*(Aq
.Ve
.PP
In addition to the standard configuration variables, the option \f(CW\*(C`show_private_variables\*(C'\fR
is also available. Template::Toolkit, by default, do not render private variables
(the ones starting with an underscore). If in your project it gets easier to disable
this feature than changing variable names, add this option to your configuration.
.PP
.Vb 1
\&        show_private_variables: true
.Ve
.PP
\&\fBWarning:\fR Given the way Template::Toolkit implements this option, different Dancer2
applications running within the same interpreter will share this option!
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This template engine allows you to use Template::Toolkit in Dancer2.
.SH "METHODS"
.IX Header "METHODS"
.SS "render($template, \e%tokens)"
.IX Subsection "render($template, %tokens)"
Renders the template.  The first arg is a filename for the template file
or a reference to a string that contains the template.  The second arg
is a hashref for the tokens that you wish to pass to
Template::Toolkit for rendering.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Dancer2, Dancer2::Core::Role::Template, Template::Toolkit.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2016 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

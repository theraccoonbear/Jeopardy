.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Test2::Util::Trace 3"
.TH Test2::Util::Trace 3 "2017-05-02" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Util::Trace \- Debug information for events
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Test2::API::Context object, as well as all Test2::Event types need to
have access to information about where they were created.  This object
represents that information.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test2::Util::Trace;
\&
\&    my $trace = Test2::Util::Trace\->new(
\&        frame => [$package, $file, $line, $subname],
\&    );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$trace\->set_detail($msg)" 4
.el .IP "\f(CW$trace\fR\->set_detail($msg)" 4
.IX Item "$trace->set_detail($msg)"
.PD 0
.ie n .IP "$msg = $trace\->detail" 4
.el .IP "\f(CW$msg\fR = \f(CW$trace\fR\->detail" 4
.IX Item "$msg = $trace->detail"
.PD
Used to get/set a custom trace message that will be used \s-1INSTEAD\s0 of
\&\f(CW\*(C`at <FILE> line <LINE>\*(C'\fR when calling \f(CW\*(C`$trace\->debug\*(C'\fR.
.ie n .IP "$str = $trace\->debug" 4
.el .IP "\f(CW$str\fR = \f(CW$trace\fR\->debug" 4
.IX Item "$str = $trace->debug"
Typically returns the string \f(CW\*(C`at <FILE> line <LINE>\*(C'\fR. If \f(CW\*(C`detail\*(C'\fR is set
then its value will be returned instead.
.ie n .IP "$trace\->alert($MESSAGE)" 4
.el .IP "\f(CW$trace\fR\->alert($MESSAGE)" 4
.IX Item "$trace->alert($MESSAGE)"
This issues a warning at the frame (filename and line number where
errors should be reported).
.ie n .IP "$trace\->throw($MESSAGE)" 4
.el .IP "\f(CW$trace\fR\->throw($MESSAGE)" 4
.IX Item "$trace->throw($MESSAGE)"
This throws an exception at the frame (filename and line number where
errors should be reported).
.ie n .IP "$frame = $trace\->\fIframe()\fR" 4
.el .IP "\f(CW$frame\fR = \f(CW$trace\fR\->\fIframe()\fR" 4
.IX Item "$frame = $trace->frame()"
Get the call frame arrayref.
.ie n .IP "($package, $file, $line, $subname) = $trace\->\fIcall()\fR" 4
.el .IP "($package, \f(CW$file\fR, \f(CW$line\fR, \f(CW$subname\fR) = \f(CW$trace\fR\->\fIcall()\fR" 4
.IX Item "($package, $file, $line, $subname) = $trace->call()"
Get the caller details for the debug-info. This is where errors should be
reported.
.ie n .IP "$pkg = $trace\->package" 4
.el .IP "\f(CW$pkg\fR = \f(CW$trace\fR\->package" 4
.IX Item "$pkg = $trace->package"
Get the debug-info package.
.ie n .IP "$file = $trace\->file" 4
.el .IP "\f(CW$file\fR = \f(CW$trace\fR\->file" 4
.IX Item "$file = $trace->file"
Get the debug-info filename.
.ie n .IP "$line = $trace\->line" 4
.el .IP "\f(CW$line\fR = \f(CW$trace\fR\->line" 4
.IX Item "$line = $trace->line"
Get the debug-info line number.
.ie n .IP "$subname = $trace\->subname" 4
.el .IP "\f(CW$subname\fR = \f(CW$trace\fR\->subname" 4
.IX Item "$subname = $trace->subname"
Get the debug-info subroutine name.
.ie n .IP "$sig = trace\->signature" 4
.el .IP "\f(CW$sig\fR = trace\->signature" 4
.IX Item "$sig = trace->signature"
Get a signature string that identifies this trace. This is used to check if
multiple events are related. The Trace includes pid, tid, file, line number,
and the cid which is \f(CW\*(AqC\ed+\*(Aq\fR for traces created by a context, or \f(CW\*(AqT\ed+\*(Aq\fR
for traces created by \f(CW\*(C`new()\*(C'\fR.
.ie n .IP "$hashref = $t\->\s-1TO_JSON\s0" 4
.el .IP "\f(CW$hashref\fR = \f(CW$t\fR\->\s-1TO_JSON\s0" 4
.IX Item "$hashref = $t->TO_JSON"
This returns a hashref suitable for passing to the \f(CW\*(C`Test2::Util::Trace\->from_json\*(C'\fR constructor. It is intended for use with the
\&\s-1JSON\s0 family of modules, which will look for a \f(CW\*(C`TO_JSON\*(C'\fR method when
\&\f(CW\*(C`convert_blessed\*(C'\fR is true.
.ie n .IP "$t = Test2::Util::Trace\->from_json(%$hashref)" 4
.el .IP "\f(CW$t\fR = Test2::Util::Trace\->from_json(%$hashref)" 4
.IX Item "$t = Test2::Util::Trace->from_json(%$hashref)"
Given the hash of data returned by \f(CW\*(C`$t\->TO_JSON\*(C'\fR, this method returns a
new trace object of the appropriate subclass.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2017 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR

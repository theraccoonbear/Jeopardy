.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MongoDB::Database 3"
.TH MongoDB::Database 3 "2017-04-10" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MongoDB::Database \- A MongoDB Database
.SH "VERSION"
.IX Header "VERSION"
version v1.8.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # get a Database object via MongoDB::MongoClient
\&    my $db   = $client\->get_database("foo");
\&
\&    # get a Collection via the Database object
\&    my $coll = $db\->get_collection("people");
\&
\&    # run a command on a database
\&    my $res = $db\->run_command([ismaster => 1]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class models a MongoDB database.  Use it to construct
MongoDB::Collection objects. It also provides the \*(L"run_command\*(R" method and
some convenience methods that use it.
.PP
Generally, you never construct one of these directly with \f(CW\*(C`new\*(C'\fR.  Instead, you
call \f(CW\*(C`get_database\*(C'\fR on a MongoDB::MongoClient object.
.SH "USAGE"
.IX Header "USAGE"
.SS "Error handling"
.IX Subsection "Error handling"
Unless otherwise explicitly documented, all methods throw exceptions if
an error occurs.  The error types are documented in MongoDB::Error.
.PP
To catch and handle errors, the Try::Tiny and Safe::Isa modules
are recommended:
.PP
.Vb 2
\&    use Try::Tiny;
\&    use Safe::Isa; # provides $_isa
\&
\&    try {
\&        $db\->run_command( @command )
\&    }
\&    catch {
\&        if ( $_\->$_isa("MongoDB::DuplicateKeyError" ) {
\&            ...
\&        }
\&        else {
\&            ...
\&        }
\&    };
.Ve
.PP
To retry failures automatically, consider using Try::Tiny::Retry.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "name"
.IX Subsection "name"
The name of the database.
.SS "read_preference"
.IX Subsection "read_preference"
A MongoDB::ReadPreference object.  It may be initialized with a string
corresponding to one of the valid read preference modes or a hash reference
that will be coerced into a new MongoDB::ReadPreference object.
By default it will be inherited from a MongoDB::MongoClient object.
.SS "write_concern"
.IX Subsection "write_concern"
A MongoDB::WriteConcern object.  It may be initialized with a hash
reference that will be coerced into a new MongoDB::WriteConcern object.
By default it will be inherited from a MongoDB::MongoClient object.
.SS "read_concern"
.IX Subsection "read_concern"
A MongoDB::ReadConcern object.  May be initialized with a hash
reference or a string that will be coerced into the level of read
concern.
.PP
By default it will be inherited from a MongoDB::MongoClient object.
.SS "max_time_ms"
.IX Subsection "max_time_ms"
Specifies the maximum amount of time in milliseconds that the server should use
for working on a query.
.PP
\&\fBNote\fR: this will only be used for server versions 2.6 or greater, as that
was when the \f(CW$maxTimeMS\fR meta-operator was introduced.
.SS "bson_codec"
.IX Subsection "bson_codec"
An object that provides the \f(CW\*(C`encode_one\*(C'\fR and \f(CW\*(C`decode_one\*(C'\fR methods, such as
from MongoDB::BSON.  It may be initialized with a hash reference that will
be coerced into a new MongoDB::BSON object.  By default it will be inherited
from a MongoDB::MongoClient object.
.SH "METHODS"
.IX Header "METHODS"
.SS "list_collections"
.IX Subsection "list_collections"
.Vb 2
\&    $result = $coll\->list_collections( $filter );
\&    $result = $coll\->list_collections( $filter, $options );
.Ve
.PP
Returns a MongoDB::QueryResult object to iterate over collection description
documents.  These will contain \f(CW\*(C`name\*(C'\fR and \f(CW\*(C`options\*(C'\fR keys like so:
.PP
.Vb 1
\&    use boolean;
\&
\&    {
\&        name => "my_capped_collection",
\&        options => {
\&            capped => true,
\&            size => 10485760,
\&        }
\&    },
.Ve
.PP
An optional filter document may be provided, which cause only collection
description documents matching a filter expression to be returned.  See the
listCollections command
documentation <http://docs.mongodb.org/manual/reference/command/listCollections/>
for more details on filtering for specific collections.
.PP
A hash reference of options may be provided. Valid keys include:
.IP "\(bu" 4
\&\f(CW\*(C`batchSize\*(C'\fR – the number of documents to return per batch.
.IP "\(bu" 4
\&\f(CW\*(C`maxTimeMS\*(C'\fR – the maximum amount of time in milliseconds to allow the command to run.  (Note, this will be ignored for servers before version 2.6.)
.SS "collection_names"
.IX Subsection "collection_names"
.Vb 2
\&    my @collections = $database\->collection_names;
\&    my @collections = $database\->collection_names( $filter );
.Ve
.PP
Returns the list of collections in this database.
.PP
An optional filter document may be provided, which cause only collection
description documents matching a filter expression to be returned.  See the
listCollections command
documentation <http://docs.mongodb.org/manual/reference/command/listCollections/>
for more details on filtering for specific collections.
.PP
\&\fBWarning:\fR if the number of collections is very large, this may return
a very large result.  Either pass an appropriate filter, or use
\&\*(L"list_collections\*(R" to iterate over collections instead.
.SS "get_collection, coll"
.IX Subsection "get_collection, coll"
.Vb 3
\&    my $collection = $database\->get_collection(\*(Aqfoo\*(Aq);
\&    my $collection = $database\->get_collection(\*(Aqfoo\*(Aq, $options);
\&    my $collection = $database\->coll(\*(Aqfoo\*(Aq, $options);
.Ve
.PP
Returns a MongoDB::Collection for the given collection name within this
database.
.PP
It takes an optional hash reference of options that are passed to the
MongoDB::Collection constructor.
.PP
The \f(CW\*(C`coll\*(C'\fR method is an alias for \f(CW\*(C`get_collection\*(C'\fR.
.SS "get_gridfsbucket, gfs"
.IX Subsection "get_gridfsbucket, gfs"
.Vb 3
\&    my $grid = $database\->get_gridfsbucket;
\&    my $grid = $database\->get_gridfsbucket($options);
\&    my $grid = $database\->gfs($options);
.Ve
.PP
This method returns a MongoDB::GridFSBucket object for storing and
retrieving files from the database.
.PP
It takes an optional hash reference of options that are passed to the
MongoDB::GridFSBucket constructor.
.PP
See MongoDB::GridFSBucket for more information.
.PP
The \f(CW\*(C`gfs\*(C'\fR method is an alias for \f(CW\*(C`get_gridfsbucket\*(C'\fR.
.SS "get_gridfs (\s-1DEPRECATED\s0)"
.IX Subsection "get_gridfs (DEPRECATED)"
.Vb 3
\&    my $grid = $database\->get_gridfs;
\&    my $grid = $database\->get_gridfs("fs");
\&    my $grid = $database\->get_gridfs("fs", $options);
.Ve
.PP
The MongoDB::GridFS class has been deprecated in favor of the new MongoDB
driver-wide standard GridFS \s-1API,\s0 available via MongoDB::GridFSBucket and
the \f(CW\*(C`get_gridfsbucket\*(C'\fR/\f(CW\*(C`gfs\*(C'\fR methods.
.PP
This method returns a MongoDB::GridFS for storing and retrieving files
from the database.  Default prefix is \*(L"fs\*(R", making \f(CW\*(C`$grid\->files\*(C'\fR
\&\*(L"fs.files\*(R" and \f(CW\*(C`$grid\->chunks\*(C'\fR \*(L"fs.chunks\*(R".
.PP
It takes an optional hash reference of options that are passed to the
MongoDB::GridFS constructor.
.PP
See MongoDB::GridFS for more information.
.SS "drop"
.IX Subsection "drop"
.Vb 1
\&    $database\->drop;
.Ve
.PP
Deletes the database.
.SS "run_command"
.IX Subsection "run_command"
.Vb 1
\&    my $output = $database\->run_command([ some_command => 1 ]);
\&
\&    my $output = $database\->run_command(
\&        [ some_command => 1 ],
\&        { mode => \*(AqsecondaryPreferred\*(Aq }
\&    );
.Ve
.PP
This method runs a database command.  The first argument must be a document
with the command and its arguments.  It should be given as an array reference
of key-value pairs or a Tie::IxHash object with the command name as the
first key.  The use of a hash reference will only reliably work for commands
without additional parameters.
.PP
By default, commands are run with a read preference of 'primary'.  An optional
second argument may specify an alternative read preference.  If given, it must
be a MongoDB::ReadPreference object or a hash reference that can be used to
construct one.
.PP
It returns the output of the command (a hash reference) on success or throws a
MongoDB::DatabaseError exception if
the command fails.
.PP
For a list of possible database commands, run:
.PP
.Vb 1
\&    my $commands = $db\->run_command([listCommands => 1]);
.Ve
.PP
There are a few examples of database commands in the
\&\*(L"\s-1DATABASE COMMANDS\*(R"\s0 in MongoDB::Examples section.  See also core documentation
on database commands: <http://dochub.mongodb.org/core/commands>.
.SH "DEPRECATIONS"
.IX Header "DEPRECATIONS"
The methods still exist, but are no longer documented.  In a future version
they will warn when used, then will eventually be removed.
.IP "\(bu" 4
last_error
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
David Golden <david@mongodb.com>
.IP "\(bu" 4
Rassi <rassi@mongodb.com>
.IP "\(bu" 4
Mike Friedman <friedo@friedo.com>
.IP "\(bu" 4
Kristina Chodorow <k.chodorow@gmail.com>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2017 by MongoDB, Inc.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve

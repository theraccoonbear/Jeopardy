.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Crypt::Bcrypt::Easy 3"
.TH Crypt::Bcrypt::Easy 3 "2016-07-27" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Bcrypt::Easy \- Simple interface to bcrypted passwords
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Crypt::Bcrypt::Easy;
\&
\&  # Generate bcrypted passwords:
\&  my $plain = \*(Aqmy_password\*(Aq;
\&  my $passwd = bcrypt\->crypt( $plain );
\&
\&  # Generate passwords with non\-default options:
\&  my $passwd = bcrypt\->crypt( text => $plain, cost => 10 );
\&
\&  # Compare passwords:
\&  if (bcrypt\->compare( text => $plain, crypt => $passwd )) {
\&    # Successful match
\&  }
\&
\&  # Spawn a new instance that will generate passwords using a different
\&  # default workcost:
\&  my $bc = bcrypt( cost => 10 );
\&  my $passwd = $bc\->crypt( $plain );
\&
\&  # Without imported constructor:
\&  use Crypt::Bcrypt::Easy ();
\&  my $passwd = Crypt::Bcrypt::Easy\->crypt( text => $plain, cost => 10 )
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an easy interface to creating and comparing bcrypt-hashed
passwords via App::bmkpasswd's exported helpers (which were created to
power \f(CWbmkpasswd(1)\fR and are a bit awkward to use directly).
.PP
This \s-1POD\s0 briefly covers usage of this interface; see App::bmkpasswd for
more details on bcrypt, internals, and documentation regarding the more
flexible functional interface.
.PP
This module uses Exporter::Tiny; you can rename the \*(L"bcrypt\*(R" function
as-needed:
.PP
.Vb 1
\&  use Crypt::Bcrypt::Easy \*(Aqbcrypt\*(Aq => { \-as => \*(Aqbc\*(Aq };
.Ve
.SS "bcrypt"
.IX Subsection "bcrypt"
.Vb 1
\&  my $bcrypt = bcrypt( cost => 10 );
.Ve
.PP
Creates and returns a new Crypt::Bcrypt::Easy object.
.PP
The default \f(CW\*(C`cost\*(C'\fR is '08'. This can be also be tuned for individual runs;
see \*(L"crypt\*(R".
.PP
(This is merely a convenience function for calling \f(CW\*(C`Crypt::Bcrypt::Easy\->new\*(C'\fR.)
.PP
If your application generates passwords in multiple child processes or
threads, you can cause \*(L"mkpasswd_forked\*(R" in App::bmkpasswd to be automatically
called during object construction in each individual process by specifying the
\&\f(CW\*(C`reset_seed\*(C'\fR option:
.PP
.Vb 1
\&  my $bcrypt = bcrypt( reset_seed => 1, cost => 8 );
.Ve
.PP
(The \f(CW\*(C`reset_seed\*(C'\fR option was added in \f(CW\*(C`v2.7.1\*(C'\fR.)
.PP
\fIcrypt\fR
.IX Subsection "crypt"
.PP
Create and return a new password hash:
.PP
.Vb 1
\&  my $crypted = bcrypt\->crypt( \*(Aqmy_password\*(Aq );
.Ve
.PP
Override default options (see App::bmkpasswd):
.PP
.Vb 5
\&  my $crypted = bcrypt\->crypt(
\&    text   => \*(Aqmy_password\*(Aq,
\&    cost   => 10,
\&    strong => 1,
\&  );
.Ve
.PP
Specifying a boolean true 'strong =>' parameter enables strongly-random salts
(see App::bmkpasswd).
.PP
\fIcompare\fR
.IX Subsection "compare"
.PP
.Vb 3
\&  if (bcrypt\->compare(text => \*(Aqmy_password\*(Aq, crypt => $crypted)) {
\&     ...
\&  }
.Ve
.PP
Returns boolean true if hashes match. Accepts any type of hash supported by
App::bmkpasswd and your system; see \*(L"passwdcmp\*(R" in App::bmkpasswd.
.PP
\fIcost\fR
.IX Subsection "cost"
.PP
Returns the current work-cost value; see App::bmkpasswd.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jon Portnoy <avenj@cobaltirc.org>

.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Sys::RunAlone 3"
.TH Sys::RunAlone 3 "2012-04-04" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Sys::RunAlone \- make sure only one invocation of a script is active at a time
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Sys::RunAlone;
\& # code of which there may only be on instance running on system
\&
\& use Sys::RunAlone silent => 1;
\& # be silent if other running instance detected
\&
\& use Sys::RunAlone retry => 50;
\& # retry execution 50 times with wait time of 1 second in between
\&
\& use Sys::RunAlone retry => \*(Aq55,60\*(Aq;
\& # retry execution 55 times with wait time of 60 seconds in between
\&
\& use Sys::RunAlone \*(Aqsilent\*(Aq;
\& # obsolete form of silent => 1
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provide a simple way to make sure the script from which this module is
loaded, is only running once on the server.  Optionally allow for retrying
execution until the other instance of the script has finished.
.SH "VERSION"
.IX Header "VERSION"
This documentation describes version 0.12.
.SH "METHODS"
.IX Header "METHODS"
There are no methods.
.SH "THEORY OF OPERATION"
.IX Header "THEORY OF OPERATION"
The functionality of this module depends on the availability of the \s-1DATA\s0
handle in the script from which this module is called (more specifically:
in the \*(L"main\*(R" namespace).
.PP
At \s-1INIT\s0 time, it is checked whethere there is a \s-1DATA\s0 handle: if not, it
exits with an error message on \s-1STDERR\s0 and an exit value of 2.
.PP
If the \s-1DATA\s0 handle is available, and it cannot be \f(CW\*(C`flock\*(C'\fRed, it exits
with an error message on \s-1STDERR\s0 and an exit value of 1.  The error message
will be surpressed when \f(CW\*(C`silent =\*(C'\fR 1> was specified in the \f(CW\*(C`use\*(C'\fR statement.
.PP
If there is a \s-1DATA\s0 handle, and it could be \f(CW\*(C`flock\*(C'\fRed, execution continues
without any further interference.
.SH "TRYING MORE THAN ONCE"
.IX Header "TRYING MORE THAN ONCE"
Optionally, it is possibly to specify a number of retries to be done if the
first \f(CW\*(C`flock\*(C'\fR fails.  This can be done by either specifying the retry value
in the \f(CW\*(C`use\*(C'\fR statement as e.g. \f(CW\*(C`retry =\*(C'\fR 55>, or with the environment
variable \f(CW\*(C`RETRY_SYS_RUNALONE\*(C'\fR.  There are two forms of the retry value:
.IP "times" 4
.IX Item "times"
.Vb 1
\& use Sys::RunAlone retry => 55;  # retry 55 times, with 1 second intervals
.Ve
.Sp
Specify the number of times to retry, with 1 second intervals.
.IP "times,seconds" 4
.IX Item "times,seconds"
.Vb 1
\& use Sys::RunAlone retry => \*(Aq55,60\*(Aq; # retry 55 times, with 60 second intervals
.Ve
.Sp
Specify both the number of retries as well as the number of seconds interval
between tries.
.PP
This is particularly useful for minutely and hourly scripts that run a long
and sometimes run into the next period.  Instead of then not doing anything
for the next period, it will start processing again as soon as it is possible.
This makes the chance of catching up so that the period after the next period
everything is in sync again.
.SH "OVERRIDING CHECK"
.IX Header "OVERRIDING CHECK"
In some cases, the same script may need to be run simultaneously with another
incarnation (but possibly with different parameters).  In order to simplify
this type of usage, it is possible to specify the environment variable
\&\f(CW\*(C`SKIP_SYS_RUNALONE\*(C'\fR with a true value.
.PP
.Vb 1
\& SKIP_SYS_RUNALONE=1 yourscript.pl
.Ve
.PP
will run the script always.
.PP
.Vb 1
\& SKIP_SYS_RUNALONE=2 yourscript.pl
.Ve
.PP
will actually be verbose about this and say:
.PP
.Vb 1
\& Skipping Sys::RunAlone check for \*(Aqyourscript.pl\*(Aq
.Ve
.SH "REQUIRED MODULES"
.IX Header "REQUIRED MODULES"
.Vb 1
\& Fcntl (any)
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
.SS "symlinks"
.IX Subsection "symlinks"
Execution of scripts that are (sym)linked to another script, will all be seen
as execution of the same script, even though the error message will only show
the specified script name.  This could be considered a bug or a feature.
.SS "changing a running script"
.IX Subsection "changing a running script"
If you change the script while it is running, the script will effectively
lose its lock on the file.  Causing any subsequent run of the same script
to be successful, causing two instances of the same script to run at the
same time (which is what you wanted to prevent by using Sys::RunAlone in
the first place).  Therefore, make sure that no instances of the script are
running (and won't be started by cronjobs while making changes) if you really
want to be 100% sure that only one instance of the script is running at the
same time.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Inspired by Randal Schwartz's mention of using the \s-1DATA\s0 handle as a semaphore
on the London \s-1PM\s0 mailing list.
.PP
Booking.com for using this heavily in production and allowing me to improve
this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Sys::RunAlways.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\& Elizabeth Mattijsen
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005, 2006, 2008, 2009, 2011, 2012 Elizabeth Mattijsen
<liz@dijkmat.nl>.  All rights reserved.  This program is free software;
you can redistribute it and/or modify it under the same terms as Perl itself.

.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MongoDB::OID 3"
.TH MongoDB::OID 3 "2017-04-10" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MongoDB::OID \- A Mongo Object ID
.SH "VERSION"
.IX Header "VERSION"
version v1.8.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
If no \f(CW\*(C`_id\*(C'\fR field is provided when a document is inserted into the database, an
\&\f(CW\*(C`_id\*(C'\fR field will be added with a new \f(CW\*(C`MongoDB::OID\*(C'\fR as its value.
.PP
.Vb 1
\&    my $id = $collection\->insert({\*(Aqname\*(Aq => \*(AqAlice\*(Aq, age => 20});
.Ve
.PP
\&\f(CW$id\fR will be a \f(CW\*(C`MongoDB::OID\*(C'\fR that can be used to retrieve or update the
saved document:
.PP
.Vb 2
\&    $collection\->update({_id => $id}, {\*(Aqage\*(Aq => {\*(Aq$inc\*(Aq => 1}});
\&    # now Alice is 21
.Ve
.PP
To create a copy of an existing \s-1OID,\s0 you must set the value attribute in the
constructor.  For example:
.PP
.Vb 4
\&    my $id1 = MongoDB::OID\->new;
\&    my $id2 = MongoDB::OID\->new(value => $id1\->value);
\&    my $id3 = MongoDB::OID\->new($id1\->value);
\&    my $id4 = MongoDB::OID\->new($id1);
.Ve
.PP
Now \f(CW$id1\fR, \f(CW$id2\fR, \f(CW$id3\fR and \f(CW$id4\fR will have the same value.
.PP
\&\s-1OID\s0 generation is thread safe.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "value"
.IX Subsection "value"
The \s-1OID\s0 value. A random value will be generated if none exists already.
It is a 24\-character hexadecimal string (12 bytes).
.PP
Its string representation is the 24\-character string.
.SH "METHODS"
.IX Header "METHODS"
.SS "to_string"
.IX Subsection "to_string"
.Vb 1
\&    my $hex = $oid\->to_string;
.Ve
.PP
Gets the value of this \s-1OID\s0 as a 24\-digit hexadecimal string.
.SS "get_time"
.IX Subsection "get_time"
.Vb 1
\&    my $date = DateTime\->from_epoch(epoch => $id\->get_time);
.Ve
.PP
Each \s-1OID\s0 contains a 4 bytes timestamp from when it was created.  This method
extracts the timestamp.
.SS "\s-1TO_JSON\s0"
.IX Subsection "TO_JSON"
.Vb 3
\&    my $json = JSON\->new;
\&    $json\->allow_blessed;
\&    $json\->convert_blessed;
\&
\&    $json\->encode(MongoDB::OID\->new);
.Ve
.PP
Returns a \s-1JSON\s0 string for this \s-1OID. \s0 This is compatible with the strict \s-1JSON\s0
representation used by MongoDB, that is, an \s-1OID\s0 with the value
\&\*(L"012345678901234567890123\*(R" will be represented as
\&\f(CW\*(C`{"$oid" : "012345678901234567890123"}\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Core documentation on object ids: <http://dochub.mongodb.org/core/objectids>.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
David Golden <david@mongodb.com>
.IP "\(bu" 4
Rassi <rassi@mongodb.com>
.IP "\(bu" 4
Mike Friedman <friedo@friedo.com>
.IP "\(bu" 4
Kristina Chodorow <k.chodorow@gmail.com>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2017 by MongoDB, Inc.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve

.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MongoDB::DataTypes 3"
.TH MongoDB::DataTypes 3 "2017-04-10" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MongoDB::DataTypes \- The data types used with MongoDB
.SH "VERSION"
.IX Header "VERSION"
version v1.8.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This goes over the types you can save to the database and use for queries in the
Perl driver.  If you are using another language, please refer to that language's
documentation (<http://api.mongodb.org>).
.SH "NOTES FOR SQL PROGRAMMERS"
.IX Header "NOTES FOR SQL PROGRAMMERS"
.SS "You must query for data using the correct type."
.IX Subsection "You must query for data using the correct type."
For example, it is perfectly valid to have some records where the field \*(L"foo\*(R" is
123 (integer) and other records where \*(L"foo\*(R" is \*(L"123\*(R" (string).  Thus, you must
query for the correct type.  If you save \f(CW\*(C`{"foo" => "123"}\*(C'\fR, you cannot query
for it with \f(CW\*(C`{"foo" => 123}\*(C'\fR.  MongoDB is strict about types.
.PP
If the type of a field is ambiguous and important to your application, you
should document what you expect the application to send to the database and
convert your data to those types before sending.  There are some object-document
mappers that will enforce certain types for certain fields for you.
.PP
You generally shouldn't save numbers as strings, as they will behave like
strings (e.g., range queries won't work correctly) and the data will take up
more space.  If you set \*(L"looks_like_number\*(R" in MongoDB::BSON, the driver will
automatically convert everything that looks like a number to a number before
sending it to the database.
.PP
Numbers are the only exception to the strict typing: all number types stored by
MongoDB (32\-bit integers, 64\-bit integers, 64\-bit floating point numbers) will
match each other.
.SH "TYPES"
.IX Header "TYPES"
.SS "Numbers"
.IX Subsection "Numbers"
By default, numbers with a decimal point will be saved as doubles (64\-bit).
.PP
\&\fB\s-1NOTE\s0\fR: On a perl compiled with long-double support, floating point
number precision will be lost when sending data to MongoDB.
.PP
\fI32\-bit Platforms\fR
.IX Subsection "32-bit Platforms"
.PP
Numbers without decimal points will be saved as 32\-bit integers.  To save a
number as a 64\-bit integer, use bigint (i.e. Math::BigInt):
.PP
.Vb 1
\&    use bigint;
\&
\&    $collection\->insert({"user_id" => 28347197234178})
.Ve
.PP
The driver will die if you try to insert a number beyond the signed 64\-bit
range: \-9,223,372,036,854,775,808 to +9,223,372,036,854,775,807.
.PP
Numbers that are saved as 64\-bit integers will be decoded as
Math::BigInt objects.
.PP
\fI64\-bit Platforms\fR
.IX Subsection "64-bit Platforms"
.PP
Numbers without a decimal point will be saved and returned as 32\-bit
integers if they will fit and 64\-bit integers otherwise.
.PP
To force 64\-bit encoding, use a Math::BigInt object.
.PP
64\-bit integers in the shell
.IX Subsection "64-bit integers in the shell"
.PP
The Mongo shell has one numeric type: the 8\-byte float.  This means that it
cannot always represent an 8\-byte integer exactly.  Thus, when you display a
64\-bit integer in the shell, it will be wrapped in a subobject that indicates
it might be an approximate value.  For instance, if we run this Perl on a
64\-bit machine:
.PP
.Vb 1
\&    $coll\->insert({_id => 1});
.Ve
.PP
then look at it in the shell, we see:
.PP
.Vb 7
\&    > db.whatever.findOne()
\&    {
\&        "_id" :
\&            {
\&                "floatApprox" : 1
\&            }
\&    }
.Ve
.PP
This doesn't mean that we saved a float, it just means that the float value of
a 64\-bit integer may not be exact.
.PP
\fIDecimal128\fR
.IX Subsection "Decimal128"
.PP
MongoDB 3.4 will add support for a new \s-1BSON\s0 type, Decimal128.  The
BSON::Decimal128 class is used as a proxy for these values for both
inserting and retrieving documents.  Be sure to use \fBstrings\fR when
constructing Decimal128 objects.
.PP
.Vb 1
\&    use BSON::Types \*(Aq:all\*(Aq;
\&
\&    my $item = {
\&        name => "widget",
\&        price => bson_decimal128( "4.99" ),
\&        currency => "USD",
\&    };
\&
\&    $coll\->insert($item);
.Ve
.PP
\fIDealing with numbers and strings in Perl\fR
.IX Subsection "Dealing with numbers and strings in Perl"
.PP
Perl is very flexible about whether something is number or a string; it
generally infers the type from context.  Unfortunately, the driver doesn't have
any context when it has to choose how to serialize a variable.  Therefore, the
default behavior is to introspect the internal state of the variable.  Any
variable that has ever been used in a string context (e.g. printed,
compared with 'eq', matched with a regular expression, etc.) will be
serialized as a string.
.PP
.Vb 3
\&    my $var = "4";
\&    # stored as the string "4"
\&    $collection\->insert({myVar => $var});
\&
\&    $var = int($var) if (int($var) eq $var);
\&    # stored as the int 4
\&    $collection\->insert({myVar => $var});
.Ve
.PP
Because of this, users often end up with more strings than they
wanted in their databases.
.PP
One technique for eliminating the string representation and store a numeric
interpretation is to add 0 to the variable:
.PP
.Vb 1
\&    $collection\->insert({myVar => 0 + $var});
.Ve
.PP
If you would like to have everything that looks like a number saved as a
number without the \f(CW\*(C`0+\*(C'\fR technique, use a MongoDB::BSON codec that has
the prefer_numeric option set.
.PP
.Vb 2
\&    $coll2 = $collection\->with_codec( prefer_numeric => 1 );
\&    $coll2\->insert( {myVar => "1.23"} ); # stored as double 1.23
.Ve
.PP
On the other hand, some data looks like a number but should be saved as a
string.  For example, suppose we are storing zip codes.  To ensure a zip
code is saved as a string, bless the string as a \f(CW\*(C`MongoDB::BSON::String\*(C'\fR
type:
.PP
.Vb 2
\&    my $z = "04101";
\&    my $zip = bless(\e$z, "MongoDB::BSON::String");
\&
\&    # zip is stored as "04101"
\&    $collection\->insert({city => "Portland",
\&        zip => bless(\e$zip, "MongoDB::BSON::String")});
.Ve
.PP
Additionally, there are two utility functions, \f(CW\*(C`force_int\*(C'\fR and
\&\f(CW\*(C`force_double\*(C'\fR, that explicitly set Perl's internal type flags to
Integer (\f(CW\*(C`IV\*(C'\fR) and Double (\f(CW\*(C`NV\*(C'\fR) respectively. These flags trigger
MongoDB's recognition of the values as Int32/Int64 (depending on the
size of the number) or Double:
.PP
.Vb 3
\&    my $x = 1.0;
\&    MongoDB::force_int($x);
\&    $coll\->insert({x => $x}); # Inserts an integer
\&
\&    MongoDB::force_double($x);
\&    $coll\->insert({x => $x}); # Inserts a double
.Ve
.SS "Strings"
.IX Subsection "Strings"
All strings must be valid \s-1UTF\-8\s0 to be sent to the database.  If a string is not
valid, it will not be saved.  If you need to save a non\-UTF\-8 string, you can
save it as a binary blob (see the Binary Data section below).
.PP
All strings returned from the database have the \s-1UTF\-8\s0 flag set.
.PP
Unfortunately, due to Perl weirdness, \s-1UTF\-8\s0 is not very pretty.  For example,
suppose we have a \s-1UTF\-8\s0 string:
.PP
.Vb 1
\&    my $str = \*(Aq√Öland Islands\*(Aq;
.Ve
.PP
Now, let's print it:
.PP
.Vb 1
\&    print "$str\en";
.Ve
.PP
You can see in the output:
.PP
.Vb 1
\&    "\ex{c5}land Islands"
.Ve
.PP
Lovely, isn't it?  This is how Perl prints \s-1UTF\-8. \s0 To make it \*(L"pretty,\*(R" there
are a couple options:
.PP
.Vb 1
\&    my $pretty_str = utf8::encode($str);
.Ve
.PP
This, unintuitively, clears the \s-1UTF\-8\s0 flag.
.PP
You can also just run
.PP
.Vb 1
\&    binmode STDOUT, \*(Aq:utf8\*(Aq;
.Ve
.PP
and then the string (and all future \s-1UTF\-8\s0 strings) will print \*(L"correctly.\*(R"
.SS "Arrays"
.IX Subsection "Arrays"
Arrays must be saved as array references (\f(CW\*(C`\e@foo\*(C'\fR, not \f(CW@foo\fR).
.SS "Embedded Documents"
.IX Subsection "Embedded Documents"
Embedded documents take the same form as top-level documents: either hash
references or Tie::IxHashes.
.SS "Dates"
.IX Subsection "Dates"
The DateTime, Time::Moment or DateTime::Tiny package can be used
to insert and query for dates. Dates stored in the database will be
returned as instances of one of these classes, depending on the \f(CW\*(C`dt_type\*(C'\fR
setting of the MongoDB::BSON codec object:
.PP
.Vb 2
\&    $codec = MongoDB::BSON\->new( dt_type => \*(AqTime::Moment\*(Aq );
\&    $client = MongoDB::MongoClient\->new( bson_codec => $codec );
.Ve
.PP
An example of storing and retrieving a date:
.PP
.Vb 1
\&    use DateTime;
\&
\&    my $now = DateTime\->now;
\&    $collection\->insert({\*(Aqts\*(Aq => $now});
\&
\&    my $obj = $collection\->find_one;
\&    print "Today is ".$obj\->{\*(Aqts\*(Aq}\->ymd."\en";
.Ve
.PP
An example of querying for a range of dates:
.PP
.Vb 2
\&    my $start = DateTime\->from_epoch( epoch => 100000 );
\&    my $end = DateTime\->from_epoch( epoch => 500000 );
\&
\&    my $cursor = $collection\->query({event => {\*(Aq$gt\*(Aq => $start, \*(Aq$lt\*(Aq => $end}});
.Ve
.PP
\&\fBWarning: creating Perl DateTime objects is extremely slow.\fR  Consider
saving dates as epoch seconds and converting the numbers to objects only when
needed.  A single DateTime field can make deserialization up to 10 times
slower.
.PP
For example, you could use the time function to store seconds since the epoch:
.PP
.Vb 1
\&    $collection\->update($criteria, {\*(Aq$set\*(Aq => {"last modified" => time()}})
.Ve
.PP
This will be \fB\s-1MUCH\s0\fR faster to deserialize.  Or, for more precision, consider
using the \*(L"time\*(R" in Time::HiRes function to get epoch
seconds as a floating-point value.
.PP
The Time::Moment module is substantially faster than DateTime and
might be a convenient alternative to using integers or floating point
numbers and manually inflating to an object before use.  Consider comparing
benchmarks using \f(CW\*(C`dt_type\*(C'\fR set to Time::Moment against those using numbers
and inflating on demand.
.PP
Note that (at least, as of \f(CW\*(C`DateTime::Tiny\*(C'\fR version 1.04) there is no
time-zone attribute for \f(CW\*(C`DateTime::Tiny\*(C'\fR objects.  We therefore
consider all such times to be in the \f(CW\*(C`UTC\*(C'\fR time zone.  Likewise,
\&\f(CW\*(C`DateTime::Tiny\*(C'\fR has no notion of milliseconds (yet?), so the
milliseconds portion of the datetime will be set to zero.
.SS "Regular Expressions"
.IX Subsection "Regular Expressions"
Use \f(CW\*(C`qr/.../\*(C'\fR to use a regular expression in a query, but be sure to limit
your regular expression to syntax and features supported by \s-1PCRE,\s0 which are
not actually fully compatible with
Perl <https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions#Differences_from_Perl>.
.PP
.Vb 1
\&    my $cursor = $collection\->query({"name" => qr/[Jj]oh?n/});
.Ve
.PP
Regular expressions will match strings saved in the database.
.PP
\&\fB\s-1NOTE\s0\fR: only the following flags are supported: \*(L"imxs\*(R".
.PP
You can also save and retrieve regular expressions themselves, but
regular expressions will be retrieved as MongoDB::BSON::Regexp
objects for safety (these will round-trip correctly).
.PP
From that object, you can attempt to compile a reference to a \f(CW\*(C`qr{}\*(C'\fR using
the \f(CW\*(C`try_compile\*(C'\fR method. However, due to \s-1PCRE\s0 differences, this could fail
to compile or could have different match behavior than intended.
.PP
.Vb 5
\&    $collection\->insert({"regex" => qr/foo/i});
\&    $obj = $collection\->find_one;
\&    if ("FOO" =~ $obj\->{regex}\->try_compile) { # matches
\&        print "hooray\en";
\&    }
.Ve
.PP
\&\fB\s-1SECURITY NOTE\s0\fR: A regular expression can evaluate arbitrary code.  You
are strongly advised never to use untrusted input as a regular expression.
.SS "Booleans"
.IX Subsection "Booleans"
Boolean values are emulated using the boolean package via the
\&\f(CW\*(C`boolean::true\*(C'\fR and \f(CW\*(C`boolean::false\*(C'\fR functions.  Using boolean objects
in documents will ensure the documents have the \s-1BSON\s0 boolean type in the
database.  Likewise, \s-1BSON\s0 boolean types in the database will be returned
as boolean objects.
.PP
An example of inserting boolean values:
.PP
.Vb 1
\&    use boolean;
\&
\&    $collection\->insert({"okay" => true, "name" => "fred"});
.Ve
.PP
An example of using boolean values for query operators (only returns documents
where the name field exists):
.PP
.Vb 1
\&    my $cursor = $collection\->query({"name" => {\*(Aq$exists\*(Aq => boolean::true}});
.Ve
.PP
Most of the time, you can just use 1 or 0 in query operations instead of
\&\f(CW\*(C`true\*(C'\fR and \f(CW\*(C`false\*(C'\fR, such as for specifying fields to return, but some
commands require boolean objects and the database will return an error
if integers 1 or 0 are used.
.PP
Boolean objects from the following \s-1JSON\s0 libraries will also be encoded
correctly in the database:
.IP "\(bu" 4
\&\s-1JSON::XS\s0
.IP "\(bu" 4
\&\s-1JSON::PP\s0
.IP "\(bu" 4
Cpanel::JSON::XS
.IP "\(bu" 4
Mojo::JSON
.IP "\(bu" 4
JSON::Tiny
.SS "MongoDB::OID"
.IX Subsection "MongoDB::OID"
\&\*(L"\s-1OID\*(R"\s0 stands for \*(L"Object \s-1ID\*(R",\s0 and is a unique id for identifying documents.
OIDs are 12 bytes, which are guaranteed to be unique.  Their string form is
a 24\-character string of hexadecimal digits.
.PP
To create a unique id:
.PP
.Vb 1
\&    my $oid = MongoDB::OID\->new;
.Ve
.PP
To create a MongoDB::OID from an existing 24\-character hexadecimal string:
.PP
.Vb 1
\&    my $oid = MongoDB::OID\->new("value" => "123456789012345678901234");
.Ve
.SS "Binary Data"
.IX Subsection "Binary Data"
By default, all database strings are \s-1UTF8. \s0 You need to store images, binaries,
and other non\-UTF8 data as binary data.  There are two ways to do this.
.PP
\fIString Refs\fR
.IX Subsection "String Refs"
.PP
In general, you can pass the string as a reference.  For example:
.PP
.Vb 2
\&    # non\-utf8 string
\&    my $string = "\exFF\exFE\exFF";
\&
\&    $collection\->insert({"photo" => \e$string});
.Ve
.PP
This will save the variable as binary data, bypassing the \s-1UTF8\s0 check.
.PP
Binary data can be matched exactly by the database, so this query will match
the object we inserted above:
.PP
.Vb 1
\&    $collection\->find({"photo" => \e$string});
.Ve
.PP
\fIMongoDB::BSON::Binary type\fR
.IX Subsection "MongoDB::BSON::Binary type"
.PP
You can also use the MongoDB::BSON::Binary class.  This allows you to
preserve the \fIsubtype\fR of your data.  Binary data in MongoDB stores a \*(L"type\*(R"
field, which can be any integer between 0 and 255.  Identical data will only
match if the subtype is the same.
.PP
Perl uses the default subtype \f(CW\*(C`SUBTYPE_GENERIC\*(C'\fR.
.PP
The driver returns binary fields as instances of MongoDB::BSON::Binary
to ensure that binary data can successfullly roundtrip.
MongoDB::BSON::Binary objects stringify to the underlying data to make it
easier to work with.
.SS "MongoDB::Code"
.IX Subsection "MongoDB::Code"
MongoDB::Code is used to represent JavaScript code and, optionally, scope.
To create one:
.PP
.Vb 1
\&    use MongoDB::Code;
\&
\&    my $code = MongoDB::Code\->new("code" => "function() { return \*(Aqhello, world\*(Aq; }");
.Ve
.PP
Or, with a scope:
.PP
.Vb 2
\&    my $code = MongoDB::Code\->new("code" => "function() { return \*(Aqhello, \*(Aq+name; }",
\&        "scope" => {"name" => "Fred"});
.Ve
.PP
Which would then return \*(L"hello, Fred\*(R" when run.
.SS "MongoDB::MinKey"
.IX Subsection "MongoDB::MinKey"
\&\f(CW\*(C`MongoDB::MinKey\*(C'\fR is \*(L"less than\*(R" any other value of any type.  This can be useful
for always returning certain documents first (or last).
.PP
\&\f(CW\*(C`MongoDB::MinKey\*(C'\fR has no methods, fields, or string form.  To create one, it is
sufficient to say:
.PP
.Vb 1
\&    $minKey = bless {}, "MongoDB::MinKey";
.Ve
.SS "MongoDB::MaxKey"
.IX Subsection "MongoDB::MaxKey"
\&\f(CW\*(C`MongoDB::MaxKey\*(C'\fR is \*(L"greater than\*(R" any other value of any type.  This can be useful
for always returning certain documents last (or first).
.PP
\&\f(CW\*(C`MongoDB::MaxKey\*(C'\fR has no methods, fields, or string form.  To create one, it is
sufficient to say:
.PP
.Vb 1
\&    $maxKey = bless {}, "MongoDB::MaxKey";
.Ve
.SS "MongoDB::Timestamp"
.IX Subsection "MongoDB::Timestamp"
.Vb 1
\&    my $ts = MongoDB::Timestamp\->new({sec => $seconds, inc => $increment});
.Ve
.PP
Timestamps are used internally by MongoDB's replication.  You can see them in
their natural habitat by querying \f(CW\*(C`local.main.$oplog\*(C'\fR.  Each entry looks
something like:
.PP
.Vb 1
\&    { "ts" : { "t" : 1278872990000, "i" : 1 }, "op" : "n", "ns" : "", "o" : { } }
.Ve
.PP
In the shell, timestamps are shown in milliseconds, although they are stored as
seconds.  So, to represent this document in Perl, we would do:
.PP
.Vb 6
\&    my $oplog = {
\&        "ts" => MongoDB::Timestamp\->new("sec" => 1278872990, "inc" => 1),
\&        "op" => "n",
\&        "ns" => "",
\&        "o" => {}
\&    }
.Ve
.PP
Timestamps are not dates.  You should not use them unless you are doing
something low-level with replication.  To save dates or times, use a number,
DateTime object, or DateTime::Tiny object.
.PP
# vim: set ts=4 sts=4 sw=4 et tw=75:
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
David Golden <david@mongodb.com>
.IP "\(bu" 4
Rassi <rassi@mongodb.com>
.IP "\(bu" 4
Mike Friedman <friedo@friedo.com>
.IP "\(bu" 4
Kristina Chodorow <k.chodorow@gmail.com>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2017 by MongoDB, Inc.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve

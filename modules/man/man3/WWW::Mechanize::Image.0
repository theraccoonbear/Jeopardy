.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "WWW::Mechanize::Image 3"
.TH WWW::Mechanize::Image 3 "2017-03-07" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Mechanize::Image \- Image object for WWW::Mechanize
.SH "VERSION"
.IX Header "VERSION"
version 1.84
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Image object to encapsulate all the stuff that Mech needs
.SH "Constructor"
.IX Header "Constructor"
.SS "\fInew()\fP"
.IX Subsection "new()"
Creates and returns a new \f(CW\*(C`WWW::Mechanize::Image\*(C'\fR object.
.PP
.Vb 9
\&    my $image = WWW::Mechanize::Image\->new( {
\&        url    => $url,
\&        base   => $base,
\&        tag    => $tag,
\&        name   => $name,    # From the INPUT tag
\&        height => $height,  # optional
\&        width  => $width,   # optional
\&        alt    => $alt,     # optional
\&    } );
.Ve
.SH "Accessors"
.IX Header "Accessors"
.ie n .SS "$link\->\fIurl()\fP"
.el .SS "\f(CW$link\fP\->\fIurl()\fP"
.IX Subsection "$link->url()"
\&\s-1URL\s0 from the link
.ie n .SS "$link\->\fIbase()\fP"
.el .SS "\f(CW$link\fP\->\fIbase()\fP"
.IX Subsection "$link->base()"
Base \s-1URL\s0 to which the links are relative.
.ie n .SS "$link\->\fIname()\fP"
.el .SS "\f(CW$link\fP\->\fIname()\fP"
.IX Subsection "$link->name()"
Name for the field from the \s-1NAME\s0 attribute, if any.
.ie n .SS "$link\->\fItag()\fP"
.el .SS "\f(CW$link\fP\->\fItag()\fP"
.IX Subsection "$link->tag()"
Tag name (either \*(L"image\*(R" or \*(L"input\*(R")
.ie n .SS "$link\->\fIheight()\fP"
.el .SS "\f(CW$link\fP\->\fIheight()\fP"
.IX Subsection "$link->height()"
Image height
.ie n .SS "$link\->\fIwidth()\fP"
.el .SS "\f(CW$link\fP\->\fIwidth()\fP"
.IX Subsection "$link->width()"
Image width
.ie n .SS "$link\->\fIalt()\fP"
.el .SS "\f(CW$link\fP\->\fIalt()\fP"
.IX Subsection "$link->alt()"
\&\s-1ALT\s0 attribute from the source tag, if any.
.ie n .SS "$link\->\s-1\fIURI\s0()\fP"
.el .SS "\f(CW$link\fP\->\s-1\fIURI\s0()\fP"
.IX Subsection "$link->URI()"
Returns the \s-1URL\s0 as a \s-1URI::URL\s0 object.
.ie n .SS "$link\->\fIurl_abs()\fP"
.el .SS "\f(CW$link\fP\->\fIurl_abs()\fP"
.IX Subsection "$link->url_abs()"
Returns the \s-1URL\s0 as an absolute \s-1URL\s0 string.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
WWW::Mechanize and WWW::Mechanize::Link
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Lester <andy at petdance.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004\-2016 by Andy Lester.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

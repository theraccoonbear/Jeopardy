.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Text::Xslate::Bridge 3"
.TH Text::Xslate::Bridge 3 "2017-01-20" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::Xslate::Bridge \- The interface base class to import methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package SomeTemplate::Bridge::Xslate;
\&
\&    use parent qw(Text::Xslate::Bridge);
\&
\&    _\|_PACKAGE_\|_\->bridge(
\&        nil    => \e%nil_methods,
\&        scalar => \e%scalar_methods,
\&        array  => \e%array_methods,
\&        hash   => \e%hash_methods,
\&
\&        function => \e%functions,
\&    );
\&
\&    # in your script
\&
\&    use Text::Xslate;
\&
\&    my $tx = Text::Xslate\->new(
\&        module => [
\&            \*(AqSomeTemplate::Bridge::Xslate\*(Aq
\&                => [\-exclude => [qw(hash::keys hash::values)]],
\&        ],
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is the base class for adaptor classes.
.SH "INTERFACE"
.IX Header "INTERFACE"
.ie n .SS """_\|_PACKAGE_\|_\->bridge(@mapping) :Void"""
.el .SS "\f(CW_\|_PACKAGE_\|_\->bridge(@mapping) :Void\fP"
.IX Subsection "__PACKAGE__->bridge(@mapping) :Void"
Install a bridge module that has method \fI\f(CI@mapping\fI\fR.  See \f(CW\*(C`example/bridge.pl\*(C'\fR
for more an example.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::Xslate
.PP
Text::Xslate::Bridge::TT2
.PP
Text::Xslate::Bridge::TT2Like
.PP
Text::Xslate::Bridge::Alloy

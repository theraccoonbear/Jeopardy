.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "MongoDB 3"
.TH MongoDB 3 "2017-04-10" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MongoDB \- Official MongoDB Driver for Perl
.SH "VERSION"
.IX Header "VERSION"
version v1.8.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use MongoDB;
\&
\&    my $client     = MongoDB\->connect(\*(Aqmongodb://localhost\*(Aq);
\&    my $collection = $client\->ns(\*(Aqfoo.bar\*(Aq); # database foo, collection bar
\&    my $result     = $collection\->insert_one({ some => \*(Aqdata\*(Aq });
\&    my $data       = $collection\->find_one({ _id => $result\->inserted_id });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the official Perl driver for MongoDB <http://www.mongodb.com>.
MongoDB is an open-source document database that provides high performance,
high availability, and easy scalability.
.PP
A MongoDB server (or multi-server deployment) hosts a number of databases. A
database holds a set of collections. A collection holds a set of documents. A
document is a set of key-value pairs. Documents have dynamic schema. Using dynamic
schema means that documents in the same collection do not need to have the same
set of fields or structure, and common fields in a collection's documents may
hold different types of data.
.PP
Here are some resources for learning more about MongoDB:
.IP "\(bu" 4
MongoDB Manual <http://docs.mongodb.org/manual/contents/>
.IP "\(bu" 4
MongoDB \s-1CRUD\s0 Introduction <http://docs.mongodb.org/manual/core/crud-introduction/>
.IP "\(bu" 4
MongoDB Data Modeling Introductions <http://docs.mongodb.org/manual/core/data-modeling-introduction/>
.PP
To get started with the Perl driver, see these pages:
.IP "\(bu" 4
MongoDB Perl Driver Tutorial
.IP "\(bu" 4
MongoDB Perl Driver Examples
.PP
Extensive documentation and support resources are available via the
MongoDB community website <http://www.mongodb.org/>.
.SH "USAGE"
.IX Header "USAGE"
The MongoDB driver is organized into a set of classes representing different
levels of abstraction and functionality.
.PP
As a user, you first create and configure a MongoDB::MongoClient object to
connect to a MongoDB deployment.  From that client object, you can get
a MongoDB::Database object for interacting with a specific database.
.PP
From a database object, you can get a MongoDB::Collection object for \s-1CRUD\s0
operations on that specific collection, or a MongoDB::GridFS object for
working with an abstract file system hosted on the database.  Each of those
classes may return other objects for specific features or functions.
.PP
See the documentation of those classes for more details or the
MongoDB Perl Driver Tutorial for an example.
.SS "Error handling"
.IX Subsection "Error handling"
Unless otherwise documented, errors result in fatal exceptions.  See
MongoDB::Error for a list of exception classes and error code
constants.
.SH "METHODS"
.IX Header "METHODS"
.SS "connect"
.IX Subsection "connect"
.Vb 3
\&    $client = MongoDB\->connect(); # localhost, port 27107
\&    $client = MongoDB\->connect($host_uri);
\&    $client = MongoDB\->connect($host_uri, $options);
.Ve
.PP
This function returns a MongoDB::MongoClient object.  The first parameter is
used as the \f(CW\*(C`host\*(C'\fR argument and must be a host name or connection string
\&\s-1URI\s0.  The second argument is
optional.  If provided, it must be a hash reference of constructor arguments
for MongoDB::MongoClient::new.
.PP
If an error occurs, a MongoDB::Error object will be thrown.
.PP
\&\fB\s-1NOTE\s0\fR: To connect to a replica set, a replica set name must be provided.
For example, if the set name is \*(L"setA\*(R":
.PP
.Vb 1
\&    $client = MongoDB\->connect("mongodb://example.com/?replicaSet=setA");
.Ve
.SH "SEMANTIC VERSIONING SCHEME"
.IX Header "SEMANTIC VERSIONING SCHEME"
Starting with MongoDB \f(CW\*(C`v1.0.0\*(C'\fR, the driver reverts to the more familiar
three-part version-tuple numbering scheme used by both Perl and MongoDB:
\&\f(CW\*(C`vX.Y.Z\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`X\*(C'\fR will be incremented for incompatible \s-1API\s0 changes.
.IP "\(bu" 4
Even-value increments of \f(CW\*(C`Y\*(C'\fR indicate stable releases with new functionality.  \f(CW\*(C`Z\*(C'\fR will be incremented for bug fixes.
.IP "\(bu" 4
Odd-value increments of \f(CW\*(C`Y\*(C'\fR indicate unstable (\*(L"development\*(R") releases that should not be used in production.  \f(CW\*(C`Z\*(C'\fR increments have no semantic meaning; they indicate only successive development releases.
.PP
See the Changes file included with releases for an indication of the nature of
changes involved.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
If the \f(CW\*(C`PERL_MONGO_WITH_ASSERTS\*(C'\fR environment variable is true before the
MongoDB module is loaded, then its various classes will be generated with
internal type assertions enabled.  This has a severe performance cost and
is not recommended for production use.  It may be useful in diagnosing
bugs.
.PP
If the \f(CW\*(C`PERL_MONGO_NO_DEP_WARNINGS\*(C'\fR environment variable is true, then
deprecated methods will not issue warnings when used.  (Normally, a
deprecation warning is issued once per call-site for deprecated methods.)
.SH "THREADS"
.IX Header "THREADS"
Because of well-known bugs, use of threads on perls before v5.8.5 is
not supported.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker at <https://jira.mongodb.org/browse/PERL>.  You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for public review and contribution under the terms of the license.
<https://github.com/mongodb/mongo\-perl\-driver>
.PP
.Vb 1
\&  git clone https://github.com/mongodb/mongo\-perl\-driver.git
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
David Golden <david@mongodb.com>
.IP "\(bu" 4
Rassi <rassi@mongodb.com>
.IP "\(bu" 4
Mike Friedman <friedo@friedo.com>
.IP "\(bu" 4
Kristina Chodorow <k.chodorow@gmail.com>
.IP "\(bu" 4
Florian Ragwitz <rafl@debian.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Andrew Page <andrew@infosiftr.com>
.IP "\(bu" 4
Andrey Khozov <avkhozov@gmail.com>
.IP "\(bu" 4
Ashley Willis <ashleyw@cpan.org>
.IP "\(bu" 4
Ask Bjørn Hansen <ask@develooper.com>
.IP "\(bu" 4
Bernard Gorman <bernard.gorman@mongodb.com>
.IP "\(bu" 4
Brendan W. McAdams <brendan@mongodb.com>
.IP "\(bu" 4
Casey Rojas <casey.j.rojas@gmail.com>
.IP "\(bu" 4
Christian Hansen <chansen@cpan.org>
.IP "\(bu" 4
Christian Sturm <kind@gmx.at>
.IP "\(bu" 4
Christian Walde <walde.christian@googlemail.com>
.IP "\(bu" 4
Colin Cyr <ccyr@sailingyyc.com>
.IP "\(bu" 4
Danny Raetzsch <danny@paperskymedia.com>
.IP "\(bu" 4
David Morrison <dmorrison@venda.com>
.IP "\(bu" 4
David Nadle <david@nadle.com>
.IP "\(bu" 4
David Steinbrunner <dsteinbrunner@pobox.com>
.IP "\(bu" 4
David Storch <david.storch@mongodb.com>
.IP "\(bu" 4
diegok <diego@freekeylabs.com>
.IP "\(bu" 4
D. Ilmari Mannsåker <ilmari.mannsaker@net\-a\-porter.com>
.IP "\(bu" 4
Eric Daniels <eric.daniels@mongodb.com>
.IP "\(bu" 4
Gerard Goossen <gerard@ggoossen.net>
.IP "\(bu" 4
Glenn Fowler <cebjyre@cpan.org>
.IP "\(bu" 4
Graham Barr <gbarr@pobox.com>
.IP "\(bu" 4
Hao Wu <echowuhao@gmail.com>
.IP "\(bu" 4
Jason Carey <jason.carey@mongodb.com>
.IP "\(bu" 4
Jason Toffaletti <jason@topsy.com>
.IP "\(bu" 4
Johann Rolschewski <rolschewski@gmail.com>
.IP "\(bu" 4
Joseph Harnish <bigjoe1008@gmail.com>
.IP "\(bu" 4
Josh Matthews <joshua.matthews@mongodb.com>
.IP "\(bu" 4
Joshua Juran <jjuran@metamage.com>
.IP "\(bu" 4
J. Stewart <jstewart@langley.theshire>
.IP "\(bu" 4
Kamil Slowikowski <kslowikowski@gmail.com>
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Matthew Shopsin <matt.shopsin@mongodb.com>
.IP "\(bu" 4
Michael Langner <langner@fch.de>
.IP "\(bu" 4
Michael Rotmanov <rotmanov@sipgate.de>
.IP "\(bu" 4
Mike Dirolf <mike@mongodb.com>
.IP "\(bu" 4
Mohammad S Anwar <mohammad.anwar@yahoo.com>
.IP "\(bu" 4
Nickola Trupcheff <n.trupcheff@gmail.com>
.IP "\(bu" 4
Nigel Gregoire <nigelg@airg.com>
.IP "\(bu" 4
Niko Tyni <ntyni@debian.org>
.IP "\(bu" 4
Nuno Carvalho <mestre.smash@gmail.com>
.IP "\(bu" 4
Orlando Vazquez <ovazquez@gmail.com>
.IP "\(bu" 4
Othello Maurer <omaurer@venda.com>
.IP "\(bu" 4
Pan Fan <nightsailer@gmail.com>
.IP "\(bu" 4
Pavel Denisov <pavel.a.denisov@gmail.com>
.IP "\(bu" 4
Rahul Dhodapkar <rahul@mongodb.com>
.IP "\(bu" 4
Robin Lee <cheeselee@fedoraproject.org>
.IP "\(bu" 4
Roman Yerin <kid@cpan.org>
.IP "\(bu" 4
Ronald J Kimball <rkimball@pangeamedia.com>
.IP "\(bu" 4
Ryan Chipman <ryan@ryanchipman.com>
.IP "\(bu" 4
Slaven Rezic <slaven.rezic@idealo.de>
.IP "\(bu" 4
Stephen Oberholtzer <stevie@qrpff.net>
.IP "\(bu" 4
Steve Sanbeg <stevesanbeg@buzzfeed.com>
.IP "\(bu" 4
Stuart Watt <stuart@morungos.com>
.IP "\(bu" 4
Uwe Voelker <uwe.voelker@xing.com>
.IP "\(bu" 4
Whitney Jackson <whjackson@gmail.com>
.IP "\(bu" 4
Xtreak <tirkarthi@users.noreply.github.com>
.IP "\(bu" 4
Zhihong Zhang <zzh_621@yahoo.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2017 by MongoDB, Inc.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve

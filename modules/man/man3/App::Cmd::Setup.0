.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "App::Cmd::Setup 3"
.TH App::Cmd::Setup 3 "2016-07-17" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::Cmd::Setup \- helper for setting up App::Cmd classes
.SH "VERSION"
.IX Header "VERSION"
version 0.331
.SH "OVERVIEW"
.IX Header "OVERVIEW"
App::Cmd::Setup is a helper library, used to set up base classes that will be
used as part of an App::Cmd program.  For the most part you should refer to
the tutorial for how you should use this library.
.PP
This class is useful in three scenarios:
.IP "when writing your App::Cmd subclass" 4
.IX Item "when writing your App::Cmd subclass"
Instead of writing:
.Sp
.Vb 2
\&  package MyApp;
\&  use base \*(AqApp::Cmd\*(Aq;
.Ve
.Sp
\&...you can write:
.Sp
.Vb 2
\&  package MyApp;
\&  use App::Cmd::Setup \-app;
.Ve
.Sp
The benefits of doing this are mostly minor, and relate to sanity-checking your
class.  The significant benefit is that this form allows you to specify
plugins, as in:
.Sp
.Vb 2
\&  package MyApp;
\&  use App::Cmd::Setup \-app => { plugins => [ \*(AqPrompt\*(Aq ] };
.Ve
.Sp
Plugins are described in App::Cmd::Tutorial and App::Cmd::Plugin.
.IP "when writing abstract base classes for commands" 4
.IX Item "when writing abstract base classes for commands"
That is: when you write a subclass of App::Cmd::Command that is intended for
other commands to use as their base class, you should use App::Cmd::Setup.  For
example, if you want all the commands in MyApp to inherit from MyApp::Command,
you may want to write that package like this:
.Sp
.Vb 2
\&  package MyApp::Command;
\&  use App::Cmd::Setup \-command;
.Ve
.Sp
Do not confuse this with the way you will write specific commands:
.Sp
.Vb 2
\&  package MyApp::Command::mycmd;
\&  use MyApp \-command;
.Ve
.Sp
Again, this form mostly performs some validation and setup behind the scenes
for you.  You can use \f(CW\*(C`base\*(C'\fR if you prefer.
.IP "when writing App::Cmd plugins" 4
.IX Item "when writing App::Cmd plugins"
App::Cmd::Plugin is a mechanism that allows an App::Cmd class to inject code
into all its command classes, providing them with utility routines.
.Sp
To write a plugin, you must use App::Cmd::Setup.  As seen above, you must also
use App::Cmd::Setup to set up your App::Cmd subclass if you wish to consume
plugins.
.Sp
For more information on writing plugins, see App::Cmd::Manual and
App::Cmd::Plugin.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2016 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "App::Cmd::Command::help 3"
.TH App::Cmd::Command::help 3 "2016-07-17" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
App::Cmd::Command::help \- display a command's help screen
.SH "VERSION"
.IX Header "VERSION"
version 0.331
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This command will either list all of the application commands and their
abstracts, or display the usage screen for a subcommand with its
description.
.SH "USAGE"
.IX Header "USAGE"
The help text is generated from three sources:
.IP "\(bu" 4
The \f(CW\*(C`usage_desc\*(C'\fR method
.IP "\(bu" 4
The \f(CW\*(C`description\*(C'\fR method
.IP "\(bu" 4
The \f(CW\*(C`opt_spec\*(C'\fR data structure
.PP
The \f(CW\*(C`usage_desc\*(C'\fR method provides the opening usage line, following the
specification described in Getopt::Long::Descriptive.  In some cases,
the default \f(CW\*(C`usage_desc\*(C'\fR in App::Cmd::Command may be sufficient and
you will only need to override it to provide additional command line
usage information.
.PP
The \f(CW\*(C`opt_spec\*(C'\fR data structure is used with Getopt::Long::Descriptive
to generate the description of the options.
.PP
Subcommand classes should override the \f(CW\*(C`discription\*(C'\fR method to provide
additional information that is prepended before the option descriptions.
.PP
For example, consider the following subcommand module:
.PP
.Vb 1
\&  package YourApp::Command::initialize;
\&
\&  # This is the default from App::Cmd::Command
\&  sub usage_desc {
\&    my ($self) = @_;
\&    my $desc = $self\->SUPER::usage_desc; # "%c COMMAND %o"
\&    return "$desc [DIRECTORY]";
\&  }
\&
\&  sub description {
\&    return "The initialize command prepares the application...";
\&  }
\&
\&  sub opt_spec {
\&    return (
\&      [ "skip\-refs|R",  "skip reference checks during init", ],
\&      [ "values|v=s@",  "starting values", { default => [ 0, 1, 3 ] } ],
\&    );
\&  }
\&
\&  ...
.Ve
.PP
That module would generate help output like this:
.PP
.Vb 2
\&  $ yourapp help initialize
\&  yourapp initialize [\-Rv] [long options...] [DIRECTORY]
\&
\&  The initialize command prepares the application...
\&
\&        \-\-help            This usage screen
\&        \-R \-\-skip\-refs    skip reference checks during init
\&        \-v \-\-values       starting values
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2016 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "DANCER2 1"
.TH DANCER2 1 "2017-03-10" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
dancer2 \- Dancer2 command line interface
.SH "VERSION"
.IX Header "VERSION"
version 0.205000
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
dancer2 <command> [options...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dancer2 is the new generation lightweight web-framework for Perl.
This tool provides nice, easily-extendable \s-1CLI\s0 interface for it.
.SS "Documentation Index"
.IX Subsection "Documentation Index"
Documentation on Dancer2 is split into several manpages. Below is a
complete outline on where to go for help.
.IP "\(bu" 4
Dancer2 Tutorial
.Sp
If you are new to the Dancer approach, you should start by reading
our Dancer2::Tutorial.
.IP "\(bu" 4
Dancer2 Manual
.Sp
Dancer2::Manual is the reference for Dancer2. Here you will find
information on the concepts of Dancer2 application development and
a comprehensive reference to the Dancer2 domain specific
language.
.IP "\(bu" 4
Dancer2 Keywords
.Sp
The keywords for Dancer2 can be found under \s-1DSL\s0 Keywords.
.IP "\(bu" 4
Dancer2 Deployment
.Sp
For configuration examples of different deployment solutions involving
Dancer2 and Plack, refer to Dancer2::Manual::Deployment.
.IP "\(bu" 4
Dancer2 Cookbook
.Sp
Specific examples of code for real-life problems and some 'tricks' for
applications in Dancer can be found in Dancer2::Cookbook
.IP "\(bu" 4
Dancer2 Config
.Sp
For configuration file details refer to Dancer2::Config. It is a
complete list of all configuration options.
.IP "\(bu" 4
Dancer2 Plugins
.Sp
Refer to Dancer2::Plugins for a partial list of available Dancer2
plugins. Note that although we try to keep this list up to date we
expect plugin authors to tell us about new modules.
.IP "\(bu" 4
Dancer2 Migration guide
.Sp
Dancer2::Manual::Migration provides the most up-to-date instruction on
how to convert a Dancer (1) based application to Dancer2.
.SH "NAME"
dancer2 \- Dancer2 command line interface
.SH "COMMANDS"
.IX Header "COMMANDS"
.IP "gen                   : create new Dancer2 application" 4
.IX Item "gen : create new Dancer2 application"
.PD 0
.IP "commands              : list the application's commands" 4
.IX Item "commands : list the application's commands"
.IP "help                  : display a command's help screen" 4
.IX Item "help : display a command's help screen"
.IP "version               : display version" 4
.IX Item "version : display version"
.PD
.PP
To get detailed description of each individual command run:
    dancer2 help <command>
.PP
The lastest list of available commands can be dispayed by:
    dancer2 commands
.SH "COMMAND 'gen'"
.IX Header "COMMAND 'gen'"
Helper script for providing a bootstrapping method to quickly and easily create
the framework for a new Dancer2 application.
.PP
\fI\s-1OPTIONS\s0\fR
.IX Subsection "OPTIONS"
.PP
.Vb 7
\&        \-a \-\-application     the name of your application
\&        \-p \-\-path            the path where to create your application
\&                             (current directory if not specified)
\&        \-o \-\-overwrite       overwrite existing files
\&        \-x \-\-no\-check        don\*(Aqt check for the latest version of Dancer2
\&                             (checking version implies internet connection)
\&        \-s \-\-skel            skeleton directory
.Ve
.PP
\fI\s-1EXAMPLE\s0\fR
.IX Subsection "EXAMPLE"
.PP
Here is an application created with dancer2:
.PP
.Vb 10
\&    $ dancer2 gen \-a MyWeb::App
\&    + MyWeb\-App
\&    + MyWeb\-App/bin
\&    + MyWeb\-App/bin/app.psgi
\&    + MyWeb\-App/config.yml
\&    + MyWeb\-App/environments
\&    + MyWeb\-App/environments/development.yml
\&    + MyWeb\-App/environments/production.yml
\&    + MyWeb\-App/views
\&    + MyWeb\-App/views/index.tt
\&    + MyWeb\-App/views/layouts
\&    + MyWeb\-App/views/layouts/main.tt
\&    + MyWeb\-App/MANIFEST.SKIP
\&    + MyWeb\-App/lib
\&    + MyWeb\-App/lib/MyWeb
\&    + MyWeb\-App/lib/MyWeb/App.pm
\&    + MyWeb\-App/public
\&    + MyWeb\-App/public/css
\&    + MyWeb\-App/public/css/style.css
\&    + MyWeb\-App/public/css/error.css
\&    + MyWeb\-App/public/images
\&    + MyWeb\-App/public/500.html
\&    + MyWeb\-App/public/404.html
\&    + MyWeb\-App/public/dispatch.fcgi
\&    + MyWeb\-App/public/dispatch.cgi
\&    + MyWeb\-App/public/javascripts
\&    + MyWeb\-App/public/javascripts/jquery.js
\&    + MyWeb\-App/t
\&    + MyWeb\-App/t/002_index_route.t
\&    + MyWeb\-App/t/001_base.t
\&    + MyWeb\-App/Makefile.PL
.Ve
.PP
The application is ready to serve:
.PP
.Vb 4
\&    $ cd MyWeb\-App
\&    $ plackup bin/app.psgi
\&    >> Listening on 127.0.0.1:3000
\&    == Entering the development dance floor ...
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
This script has been written by Ivan Kruglov
<ivan.kruglov@yahoo.com> base on original dancer2
script which has been written by Sebastien Deseille
<sebastien.deseille@gmail.com> and Alexis Sukrieh
<sukria@cpan.org>.
.SH "SOURCE CODE"
.IX Header "SOURCE CODE"
See Dancer2 for more information.
.SH "LICENSE"
.IX Header "LICENSE"
This module is free software and is published under the same
terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dancer Core Developers
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2016 by Alexis Sukrieh.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "XSLATE 1"
.TH XSLATE 1 "2017-01-19" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
xslate \- Process Xslate Templates
.SH "USAGE"
.IX Header "USAGE"
.Vb 2
\&    # process paths
\&    $ xslate [options...] target
\&
\&    \-a \-\-cache               Cache level
\&    \-t \-\-type                Output content type (html | xml | text)
\&    \-E \-\-engine              Template engine
\&    \-D \-\-define              Define template variables (e.g. foo=bar)
\&    \-I \-\-path                Include paths
\&    \-\-version                Print version information
\&    \-\-oe \-\-output_encoding   Output encoding (default: UTF\-8)
\&    \-M \-\-module              Modules templates will use (e.g. name=sub1,sub2)
\&    \-e \-\-eval                One line of template code
\&    \-s \-\-syntax              Template syntax (e.g. TTerse)
\&    \-d \-\-debug               Debugging flags
\&    \-x \-\-suffix              Output suffix mapping (e.g. tx=html)
\&    \-\-ie \-\-input_encoding    Input encoding (default: UTF\-8)
\&    \-i \-\-ignore              Regular expression the process will ignore
\&    \-c \-\-cache_dir           Directory the cache files will be saved in
\&    \-o \-\-dest                Destination directory
\&    \-w \-\-verbose             Warning level (default: 2)
\&
\&    # one liners, with $ARGV and $ENV
\&    xslate \-e \*(AqHello, <: $ARGV[0] :> world!\*(Aq Xslate
\&    # => Hello, Xslate world!
\&    xslate \-MDigest::MD5=md5_hex \-e \*(Aq<: md5_hex($ARGV[0]) :>\*(Aq \*(Aqfoo bar\*(Aq
\&    # => 327b6f07435811239bc47e1544353273
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`xslate\*(C'\fR script is used to process entire directory trees containing
template files, or to process one liners.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.SS "target"
.IX Subsection "target"
Specifies the target to be processed by Xslate.
.PP
If the target is a file, the file is processed, and \f(CW\*(C`xslate\*(C'\fR will exit immediately. If the target is a directory, then the directory is traversed and each file found is processed via \f(CW\*(C`xslate\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Maki, Daisuke (lestrrat)
.PP
Fuji, Goro (gfx)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::Xslate

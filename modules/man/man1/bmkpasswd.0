.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "BMKPASSWD 1"
.TH BMKPASSWD 1 "2016-07-27" "perl v5.24.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\& bmkpasswd \- bcrypt\-enabled mkpasswd
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& bmkpasswd [OPTIONS]... [PASSWD]
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 11
\& \-m, \-\-method=TYPE  [default: bcrypt]
\&     Types:  bcrypt  (recommended; guaranteed available)
\&             sha512  (requires recent libc or Crypt::Passwd::XS)
\&             sha256  (requires recent libc or Crypt::Passwd::XS)
\& \-w, \-\-workcost=NUM Bcrypt work\-cost factor; default 08.
\&                    Higher is slower. Should be a two\-digit power of 2.
\& \-c, \-\-check=HASH   Compare password against given HASH
\& \-s, \-\-strong       Use strongly\-random salt generation
\& \-b, \-\-benchmark    Show timers; useful for comparing hash generation
\& \-\-available        List available methods (one per line)
\& \-\-version          Display version information and available methods
.Ve
.PP
If \s-1PASSWD\s0 is missing, it is prompted for interactively.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simple bcrypt-enabled mkpasswd.
.PP
While \s-1SHA512\s0 isn't a bad choice if you have it, bcrypt has the 
advantage of including a configurable work cost factor.
.PP
A higher work cost factor exponentially increases hashing time, meaning 
a brute-force attack against stolen hashes can take a \fBvery\fR long time.
.PP
Salts are randomly generated using Bytes::Random::Secure::Tiny.  Using the
\&\f(CW\*(C`\-\-strong\*(C'\fR option requires a reliable source of entropy; if you are
entropy-starved, try \fBhaveged\fR
(<http://www.issihosts.com/haveged/downloads.html>), especially on headless
Linux systems.
.PP
See App::bmkpasswd for more details on bcrypt and the inner workings of
this software.
.PP
See Crypt::Bcrypt::Easy if you'd like a simple interface to creating and
comparing bcrypted passwords from your own modules.
.SH "CAVEATS"
.IX Header "CAVEATS"
Users of \f(CW\*(C`5.8.x\*(C'\fR perls or \f(CW\*(C`MSWin32\*(C'\fR platforms will need Term::ReadKey to
turn off terminal echo for password prompts.
.SH "AUTHOR"
.IX Header "AUTHOR"
Jon Portnoy <jon@portnoy.me>
